# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
#Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
Output <- data.frame("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
#Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
Output <- data.frame("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N)
}# end cap.recap() function
cap.recap(1000)
cap.recap(1000)
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(1000)
?data.frame
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
#Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
Output <- data.frame(list.sim.m.two.N.hat.LP, N)
}# end cap.recap() function
cap.recap(1000)
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
list.sim.m.two.N.hat.LP <- cbind(list.sim.m.two, list.sim.N.hat.LP)
result < data.frame(list.sim.m.two.N.hat.LP, POP)
# Combine list of m2 & N^LP values into data frame
#list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
#Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(1000)
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
list.sim.m.two.N.hat.LP <- cbind(list.sim.m.two, list.sim.N.hat.LP)
result <- data.frame(list.sim.m.two.N.hat.LP, POP)
# Combine list of m2 & N^LP values into data frame
#list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
#Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(1000)
# Motivate capture-recapture () function
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
list.sim.m.two.N.hat.LP <- cbind(list.sim.m.two, list.sim.N.hat.LP)
result <- data.frame(list.sim.m.two.N.hat.LP, N)
# Combine list of m2 & N^LP values into data frame
#list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
#Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(1000)
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
#list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
list.sim.m.two.N.hat.LP <- rbind(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(1000)
cap.recap(5)
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
#list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
list.sim.m.two.N.hat.LP <- cbind(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(10)
cap.recap <- function(n.sim){
#n.sim: number of iterations
#list.sim.m.two: m2 values for entire simulation
#list.sim.N.hat.LP: N.hat.LP values for entire simulation
list.sim.m.two <- NULL
list.sim.N.hat.LP <- NULL
# Obtain m2 & N^LP for each iteration
for(i in 1:n.sim){
# First catch
sim.catch.one <- sample(N, n.one, replace=T, prob=NULL)
sim.catch.one <- as.numeric(sim.catch.one)
# Second catch
sim.catch.two <- sample(N, n.two, replace=T, prob=NULL)
sim.catch.two <- as.numeric(sim.catch.two)
# Common elements between first and second catche
sim.m.two <- intersect(sim.catch.one, sim.catch.two)
# if m2 == 0
if(length(sim.m.two) == 0){
list.sim.m.two[i] <- as.character(0)
}else{
sim.m.two.values <- sim.m.two
sim.m.two.values <- toString(sim.m.two.values)
list.sim.m.two[i] <- sim.m.two.values
}# end if/else
# Calculate N^LP
sim.m.two <- length(sim.m.two)
sim.N.hat.LP <- (n.one*n.two)/(sim.m.two)
list.sim.N.hat.LP[i] <- sim.N.hat.LP
}# end m2 & N^LP
# Combine list of m2 & N^LP values into data frame
list.sim.m.two.N.hat.LP <- data.frame(list.sim.m.two, list.sim.N.hat.LP)
# Return output of m2 & N^LP data frame and N
Output <- return(list("m2 & N^LP"=list.sim.m.two.N.hat.LP, "POP"=N))
}# end cap.recap() function
cap.recap(10)
output<-cap.recap(1000)
rm(output)
output<-cap.recap(10)
output
class(out)
class(output)
class(output)
dim(output)
data.frame(Output)
Output<-cap.recap(10)
rm(output)
Output <- data.frame(Output)
Output
colname(Output)
col(Output)
col.names(Output)
colnames(Output)
Output <- colnames("m2", "N^LP", "POP")
colnames(Output) <- c("m2", "N^LP", "POP")
Output
dim(Output)
v.NLP <- Output[,2]
v.NLP
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste(n.sim, " draws from\n1000 Iterations(n=", n.sim, sep=""),
xlab="N^LP vector", ylab="density")
legend("bottomright", legend="Actual Population", bty="n")
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("bottomright", legend="Actual Population", bty="n")
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topright", legend="Actual Population", bty="n")
legend("topleft", legend=past("N="N))
legend("topleft", legend=paste("N=", N))
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topright", legend="Actual Population", bty="n")
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
# legend("topright", legend="Actual Population", bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
text(coordinates(N), labels="Actual Population", cex=1.2)
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
# legend("topright", legend="Actual Population", bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
abline(v = N, col = "blue", lwd = 2)
?abline
?legend
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topright", legend="Actual Population", text.col=par("blue"),bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
abline(v = N, col = "blue", lwd = 2)
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topleft", legend="Actual Population", text.col=par("blue"),bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
abline(v = N, col = "blue", lwd = 2)
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topleft", legend="Actual Population", text.col=par(blue),bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
abline(v = N, col = "blue", lwd = 2)
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topleft", legend="Actual Population", text.col="blue",bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
abline(v = N, col = "blue", lwd = 2)
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topleft", legend="Actual Population=5000", text.col="blue",bty="n")
##subset(data.x, rd_exp==max(data.x$rd_exp))
abline(v = N, col = "blue", lwd = 2)
Output<-cap.recap(1000)
# Extract N^LP vector from Output
Output <- data.frame(Output)
colnames(Output) <- c("m2", "N^LP", "POP")
v.NLP <- Output[,2]
# Plot histogram
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topleft", legend="Actual Population=5000", text.col="blue",bty="n")
abline(v = N, col = "blue", lwd = 2)
Output<-cap.recap(1000)
# Extract N^LP vector from Output
Output <- data.frame(Output)
colnames(Output) <- c("m2", "N^LP", "POP")
v.NLP <- Output[,2]
# Plot histogram
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("bottomleft", legend="Actual Population=5000", text.col="blue",bty="n")
abline(v = N, col = "blue", lwd = 2)
Output<-cap.recap(1000)
# Extract N^LP vector from Output
Output <- data.frame(Output)
colnames(Output) <- c("m2", "N^LP", "POP")
v.NLP <- Output[,2]
# Plot histogram
hist(v.NLP, freq=FALSE, las=TRUE,
main=paste("From 1000 Iterations"),
xlab="N^LP vector", ylab="density")
legend("topleft", legend="Actual Population=5000", text.col="blue",bty="n")
abline(v = N, col = "blue", lwd = 2)
setwd("C:/Users/Chak/Desktop/Computation and Statistics/Homework 3")
save.image("C:/Users/Chak/Desktop/Computation and Statistics/Homework 3/HW3_Chak Wong.RData")
v.NLP
save.image("C:/Users/Chak/Desktop/Computation and Statistics/Homework 3/HW3_Chak Wong.RData")
